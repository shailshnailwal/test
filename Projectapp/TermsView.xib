<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<document type="com.apple.InterfaceBuilder3.CocoaTouch.XIB" version="3.0" toolsVersion="4510" systemVersion="12E55" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none">
    <dependencies>
        <deployment defaultVersion="1792" identifier="iOS"/>
        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="3742"/>
    </dependencies>
    <objects>
        <placeholder placeholderIdentifier="IBFilesOwner" id="-1" userLabel="File's Owner" customClass="TermsView">
            <connections>
                <outlet property="agrbtn" destination="XUM-GW-A17" id="JBe-0l-2ki"/>
                <outlet property="view" destination="1" id="3"/>
            </connections>
        </placeholder>
        <placeholder placeholderIdentifier="IBFirstResponder" id="-2" customClass="UIResponder"/>
        <view contentMode="scaleToFill" id="1">
            <rect key="frame" x="0.0" y="0.0" width="320" height="568"/>
            <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
            <subviews>
                <textView clipsSubviews="YES" multipleTouchEnabled="YES" userInteractionEnabled="NO" contentMode="scaleToFill" id="Zzk-Ke-EBz">
                    <rect key="frame" x="0.0" y="48" width="320" height="459"/>
                    <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
                    <color key="backgroundColor" red="1" green="1" blue="1" alpha="1" colorSpace="calibratedRGB"/>
                    <string key="text">Almost every app, other than the simplest, does this. Hope it helps. For the record in theory you do not necessarily have to bother with the "synchronize" call but we have found over huge numbers of real-life user runs it is probably more reliable if you do include it.

PS Do NOT use Booleans in preferences. If you are a new programmer, it is iffy to understand the defaults and hence never maintainable. Stick to integers. (They are always an "integer zero" when first unused, so you have no problems.) Easy Peasy. Hope it helps.Almost every app, other than the simplest, does this. Hope it helps. For the record in theory you do not necessarily have to bother with the "synchronize" call but we have found over huge numbers of real-life user runs it is probably more reliable if you do include it.

PS Do NOT use Booleans in preferences. If you are a new programmer, it is iffy to understand the defaults and hence never maintainable. Stick to integers. (They are always an "integer zero" when first unused, so you have no problems.) Easy Peasy. Hope it helps.Almost every app, other than the simplest, does this. Hope it helps. For the record in theory you do not necessarily have to bother with the "synchronize" call but we have found over huge numbers of real-life user runs it is probably more reliable if you do include it.

PS Do NOT use Booleans in preferences. If you are a new programmer, it is iffy to understand the defaults and hence never maintainable. Stick to integers. (They are always an "integer zero" when first unused, so you have no problems.) Easy Peasy. Hope it helps.Almost every app, other than the simplest, does this. Hope it helps. For the record in theory you do not necessarily have to bother with the "synchronize" call but we have found over huge numbers of real-life user runs it is probably more reliable if you do include it.

PS Do NOT use Booleans in preferences. If you are a new programmer, it is iffy to understand the defaults and hence never maintainable. Stick to integers. (They are always an "integer zero" when first unused, so you have no problems.) Easy Peasy. Hope it helps.Almost every app, other than the simplest, does this. Hope it helps. For the record in theory you do not necessarily have to bother with the "synchronize" call but we have found over huge numbers of real-life user runs it is probably more reliable if you do include it.

PS Do NOT use Booleans in preferences. If you are a new programmer, it is iffy to understand the defaults and hence never maintainable. Stick to integers. (They are always an "integer zero" when first unused, so you have no problems.) Easy Peasy. Hope it helps.Almost every app, other than the simplest, does this. Hope it helps. For the record in theory you do not necessarily have to bother with the "synchronize" call but we have found over huge numbers of real-life user runs it is probably more reliable if you do include it.

PS Do NOT use Booleans in preferences. If you are a new programmer, it is iffy to understand the defaults and hence never maintainable. Stick to integers. (They are always an "integer zero" when first unused, so you have no problems.) Easy Peasy. Hope it helps.Almost every app, other than the simplest, does this. Hope it helps. For the record in theory you do not necessarily have to bother with the "synchronize" call but we have found over huge numbers of real-life user runs it is probably more reliable if you do include it.

PS Do NOT use Booleans in preferences. If you are a new programmer, it is iffy to understand the defaults and hence never maintainable. Stick to integers. (They are always an "integer zero" when first unused, so you have no problems.) Easy Peasy. Hope it helps.Almost every app, other than the simplest, does this. Hope it helps. For the record in theory you do not necessarily have to bother with the "synchronize" call but we have found over huge numbers of real-life user runs it is probably more reliable if you do include it.

PS Do NOT use Booleans in preferences. If you are a new programmer, it is iffy to understand the defaults and hence never maintainable. Stick to integers. (They are always an "integer zero" when first unused, so you have no problems.) Easy Peasy. Hope it helps.Almost every app, other than the simplest, does this. Hope it helps. For the record in theory you do not necessarily have to bother with the "synchronize" call but we have found over huge numbers of real-life user runs it is probably more reliable if you do include it.

PS Do NOT use Booleans in preferences. If you are a new programmer, it is iffy to understand the defaults and hence never maintainable. Stick to integers. (They are always an "integer zero" when first unused, so you have no problems.) Easy Peasy. Hope it helps.Almost every app, other than the simplest, does this. Hope it helps. For the record in theory you do not necessarily have to bother with the "synchronize" call but we have found over huge numbers of real-life user runs it is probably more reliable if you do include it.

PS Do NOT use Booleans in preferences. If you are a new programmer, it is iffy to understand the defaults and hence never maintainable. Stick to integers. (They are always an "integer zero" when first unused, so you have no problems.) Easy Peasy. Hope it helps.Almost every app, other than the simplest, does this. Hope it helps. For the record in theory you do not necessarily have to bother with the "synchronize" call but we have found over huge numbers of real-life user runs it is probably more reliable if you do include it.

PS Do NOT use Booleans in preferences. If you are a new programmer, it is iffy to understand the defaults and hence never maintainable. Stick to integers. (They are always an "integer zero" when first unused, so you have no problems.) Easy Peasy. Hope it helps.Almost every app, other than the simplest, does this. Hope it helps. For the record in theory you do not necessarily have to bother with the "synchronize" call but we have found over huge numbers of real-life user runs it is probably more reliable if you do include it.

PS Do NOT use Booleans in preferences. If you are a new programmer, it is iffy to understand the defaults and hence never maintainable. Stick to integers. (They are always an "integer zero" when first unused, so you have no problems.) Easy Peasy. Hope it helps.Almost every app, other than the simplest, does this. Hope it helps. For the record in theory you do not necessarily have to bother with the "synchronize" call but we have found over huge numbers of real-life user runs it is probably more reliable if you do include it.

PS Do NOT use Booleans in preferences. If you are a new programmer, it is iffy to understand the defaults and hence never maintainable. Stick to integers. (They are always an "integer zero" when first unused, so you have no problems.) Easy Peasy. Hope it helps.</string>
                    <fontDescription key="fontDescription" type="system" pointSize="14"/>
                    <textInputTraits key="textInputTraits" autocapitalizationType="sentences"/>
                </textView>
                <label opaque="NO" clipsSubviews="YES" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="End User Licence Agreement " textAlignment="center" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" id="wzj-D2-CZ8">
                    <rect key="frame" x="0.0" y="0.0" width="320" height="58"/>
                    <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES" flexibleMaxY="YES"/>
                    <color key="backgroundColor" red="0.0" green="0.68627450980392157" blue="0.89803921568627454" alpha="1" colorSpace="calibratedRGB"/>
                    <fontDescription key="fontDescription" name="ArialHebrew-Bold" family="Arial Hebrew" pointSize="20"/>
                    <color key="textColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
                    <nil key="highlightedColor"/>
                </label>
                <label opaque="NO" clipsSubviews="YES" userInteractionEnabled="NO" contentMode="left" horizontalHuggingPriority="251" verticalHuggingPriority="251" text="" textAlignment="center" lineBreakMode="tailTruncation" baselineAdjustment="alignBaselines" adjustsFontSizeToFit="NO" id="d7y-S1-ArV">
                    <rect key="frame" x="0.0" y="510" width="320" height="58"/>
                    <autoresizingMask key="autoresizingMask" flexibleMinX="YES" flexibleMaxX="YES" flexibleMinY="YES"/>
                    <color key="backgroundColor" red="0.0" green="0.68627450980392157" blue="0.93725490196078431" alpha="1" colorSpace="calibratedRGB"/>
                    <fontDescription key="fontDescription" type="system" pointSize="20"/>
                    <color key="textColor" white="1" alpha="1" colorSpace="calibratedWhite"/>
                    <nil key="highlightedColor"/>
                </label>
                <button opaque="NO" clipsSubviews="YES" contentMode="scaleToFill" contentHorizontalAlignment="center" contentVerticalAlignment="center" lineBreakMode="middleTruncation" hasAttributedTitle="YES" id="XUM-GW-A17">
                    <rect key="frame" x="10" y="515" width="73" height="44"/>
                    <autoresizingMask key="autoresizingMask" flexibleMinY="YES"/>
                    <state key="normal" backgroundImage="header_bg.png">
                        <attributedString key="attributedTitle">
                            <fragment content="I Accept">
                                <attributes>
                                    <font key="NSFont" size="15" name="HelveticaNeue"/>
                                    <paragraphStyle key="NSParagraphStyle" alignment="natural" lineBreakMode="wordWrapping" baseWritingDirection="natural"/>
                                </attributes>
                            </fragment>
                        </attributedString>
                    </state>
                    <connections>
                        <action selector="agree:" destination="-1" eventType="touchUpInside" id="xOA-aG-8Fv"/>
                    </connections>
                </button>
            </subviews>
            <color key="backgroundColor" white="1" alpha="1" colorSpace="custom" customColorSpace="calibratedWhite"/>
            <simulatedStatusBarMetrics key="simulatedStatusBarMetrics"/>
            <simulatedScreenMetrics key="simulatedDestinationMetrics" type="retina4"/>
        </view>
    </objects>
    <resources>
        <image name="header_bg.png" width="640" height="106"/>
    </resources>
</document>